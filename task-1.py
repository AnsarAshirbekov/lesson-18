# Напишите программу, в которой есть главный класс с текстовым полем. В главное классе
# должен быть метод для присваивания значения полю: без аргументов и с одним текстовым
# аргументом. Объект главного класса создаётся передачей одного текстового аргумента
# конструктору. На основе главного класса создается класса потомок. В классе-потомке нужно
# добавить числовое поле. У конструктора класса-потомка два аргумента.

# Пересмотрите алгоритм решения прошлой практической работы, с
# использованием инкапсуляции.

# Повторим алгоритм из задачи 4 предыдущей домашки, но только теперь атрибуты сделаем защищенными..
class MainClass:
    def __init__(self):
        self.__text = '' # просто добавив два нижних подчеркивания перед названием атрибута
    
    def set_text(self):
        self.__text = input('Введите любой текст: ')

    def get_text(self):
        return self.__text

class ChildClass(MainClass):
    def __init__(self):
        super().__init__()  # улучшим наш прошлый код использованием функции super(), наследуя атрибуты и методы
        
        self.__number = 0 
    
    def set_number(self):
        self.__number = int(input('Введите любое число: '))
    
    def get_number(self):
        return self.__number

child_object = ChildClass()
# Чтобы получить доступ к защищенным атрибутам необходимо вызвать следующие методы:
child_object.set_text()
child_object.set_number()
print(child_object.get_text())
print(child_object.get_number())
# Никаким другим способом узнать значения защищенных атрибутов нельзя
# Чтобы в этом убедиться, попробуем обратиться к атрибутам напрямую извне классов

try:
    print(child_object.__text)  # Должна возникнуть ошибка AttributeError
except AttributeError as e:
    print(f"Ошибка доступа: {e}")

try:
    print(child_object.__number)  # Должна возникнуть ошибка AttributeError
except AttributeError as e:
    print(f"Ошибка доступа: {e}")